<?xml version="1.0" encoding="UTF-8"?>
<includes>

    <variable name="Image_OtherIcon">
        <value condition="$EXP[Exp_IsStudio]">$INFO[ListItem.Label,resource://resource.images.studios.white/,.png]</value>
        <value condition="$EXP[Exp_IsCountry]">$INFO[ListItem.Label,resource://resource.images.moviecountryicons.maps/,.png]</value>
    </variable>

    <variable name="Image_GenreIcon">
        <value condition="System.HasAddon(resource.images.moviegenreicons.horizon)">$INFO[ListItem.Label,resource://resource.images.moviegenreicons.horizon/,.png]</value>
        <value condition="System.HasAddon(resource.images.moviegenreicons.transparent)">$INFO[ListItem.Label,resource://resource.images.moviegenreicons.transparent/,.png]</value>
    </variable>

    <variable name="Image_FullscreenWidget_Artwork">
        <value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(ListItem.EPGEventIcon) + !Skin.HasSetting(PVR.DisableEPGEventIconFanart)">$INFO[ListItem.EPGEventIcon]</value>
    </variable>

    <variable name="Image_DiscArt">
        <value condition="!String.IsEmpty(ListItem.Art(discart))">$INFO[ListItem.Art(discart)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(album.discart))">$INFO[ListItem.Art(album.discart)]</value>
    </variable>

    <variable name="Image_FullscreenWidget_PlayButton">
        <value condition="Container(301).ListItem.IsFolder">special://skin/extras/icons/folder.png</value>
        <value>special://skin/extras/icons/play3.png</value>
    </variable>

    <variable name="Image_VideoInfo_PlayButton">
        <value condition="ListItem.IsFolder">special://skin/extras/icons/folder.png</value>
        <value>special://skin/extras/icons/play3.png</value>
    </variable>

    <variable name="Image_ArtistFanartVis">
        <value condition="System.HasAddon(script.artistslideshow) + !Skin.HasSetting(ArtistSlideShow.Disabled) + !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image))">$INFO[Window(Visualisation).Property(ArtistSlideshow.Image)]</value>
        <value condition="[!System.HasAddon(script.artistslideshow) | Skin.HasSetting(ArtistSlideShow.Disabled) | String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image))] + !String.IsEmpty(Player.Art(fanart))">$INFO[Player.Art(fanart)]</value>
        <value>common/null.png</value>
    </variable>

    <variable name="Image_OSD_Repeat">
        <value condition="Playlist.IsRepeatOne">osd/repeat-one.png</value>
        <value condition="Playlist.IsRepeat">osd/repeat-all.png</value>
        <value>osd/repeat-off.png</value>
    </variable>

    <variable name="Image_OSD_Shuffle">
        <value condition="Playlist.IsRandom">osd/shuffle-on.png</value>
        <value>osd/shuffle.png</value>
    </variable>

    <variable name="Image_UpNext">
        <value condition="!String.IsEmpty(Window.Property(landscape))">$INFO[Window.Property(landscape)]</value>
        <value condition="!String.IsEmpty(Window.Property(fanart))">$INFO[Window.Property(fanart)]</value>
        <value condition="!String.IsEmpty(Window.Property(thumb))">$INFO[Window.Property(thumb)]</value>
    </variable>

    <variable name="Image_IsCurrentStream">
        <value condition="!String.IsEmpty(ListItem.Property(iscurrent))">buttons/check-on.png</value>
        <value>buttons/check-off.png</value>
    </variable>

    <variable name="Image_VideoQuality_Main">
        <value condition="!$EXP[Exp_InfoDialogs] + Window.IsVisible(Home) + Integer.IsEqual(Window(Home).Property(TMDBHelper.WidgetContainer),301)">$VAR[Image_VideoQuality_C301]</value>
        <value>$VAR[Image_VideoQuality_Parent]</value>
    </variable>

    <variable name="Image_OSD_PlayPause">
        <value condition="Player.Paused">osd/play.png</value>
        <value condition="Player.Forwarding">osd/ff.png</value>
        <value condition="Player.Rewinding">osd/rw.png</value>
        <value>osd/pause.png</value>
    </variable>

    <variable name="Image_NowPlaying_Icon">
        <value condition="Player.Paused">osd/pause.png</value>
        <value condition="Player.Forwarding">osd/ff.png</value>
        <value condition="Player.Rewinding">osd/rw.png</value>
        <value>osd/play.png</value>
    </variable>

    <variable name="Image_OSD_NextStop">
        <value condition="String.IsEqual(VideoPlayer.PlaylistPosition,VideoPlayer.PlaylistLength) | Skin.HasSetting(OSD.AlwaysDisplayStop)">osd/stop.png</value>
        <value>osd/next.png</value>
    </variable>

    <variable name="Image_CombinedStudio">
        <value condition="Container.Content(studios)">$INFO[ListItem.Label,resource://resource.images.studios.coloured/,.png]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Network.1.Name))">$INFO[ListItem.Property(Network.1.Name),resource://resource.images.studios.coloured/,.png]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Studio.1.Name))">$INFO[ListItem.Property(Studio.1.Name),resource://resource.images.studios.coloured/,.png]</value>
        <value condition="!String.IsEmpty(ListItem.Studio)">$INFO[ListItem.Studio,resource://resource.images.studios.coloured/,.png]</value>
    </variable>

    <variable name="Image_DirectorIcon">
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.1.Thumb)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.1.Role),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.1.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.2.Thumb)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.2.Role),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.2.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.3.Thumb)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.3.Role),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.3.Thumb)]</value>
        <value>special://skin/extras/icons/video-addons.png</value>
    </variable>

    <variable name="Image_WriterIcon">
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.1.Thumb)) + [String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.1.Role),Writer) | String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.1.Role),Screenplay)]">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.1.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.2.Thumb)) + [String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.2.Role),Writer) | String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.2.Role),Screenplay)]">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.2.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.3.Thumb)) + [String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.3.Role),Writer) | String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.3.Role),Screenplay)]">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.3.Thumb)]</value>
        <value>special://skin/extras/icons/write.png</value>
    </variable>

    <variable name="Image_CreatorIcon">
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Creator.1.Thumb))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Creator.1.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Creator.2.Thumb))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Creator.2.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Creator.3.Thumb))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Creator.3.Thumb)]</value>
        <value>special://skin/extras/icons/person.png</value>
    </variable>

    <variable name="Image_OSD_Clearlogo">
        <value condition="!String.IsEmpty(Player.Art(clearlogo))">$INFO[Player.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(Player.Art(tvshow.clearlogo))">$INFO[Player.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(Player.Art(artist.clearlogo))">$INFO[Player.Art(artist.clearlogo)]</value>
    </variable>

    <variable name="Image_Clearlogo">
        <value condition="!String.IsEmpty(ListItem.Art(clearlogo))">$INFO[ListItem.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.clearlogo))">$INFO[ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(artist.clearlogo))">$INFO[ListItem.Art(artist.clearlogo)]</value>
    </variable>

    <variable name="Image_CropLogo_Main">
        <value condition="$EXP[Exp_RecommendationDialogs] + !String.IsEmpty(Window.Property(CropLogo))">$INFO[Window.Property(CropLogo)]</value>
        <value condition="!$EXP[Exp_InfoDialogs] + Window.IsVisible(Home) + Integer.IsEqual(Window(Home).Property(TMDBHelper.WidgetContainer),301)">$VAR[Image_CropLogo_C301]</value>
        <value>$VAR[Image_CropLogo_Parent]</value>
    </variable>

    <variable name="Image_MuteBug_Seekbar">
        <value condition="Player.Muted">special://skin/extras/icons/mute.png</value>
        <value>special://skin/extras/icons/videoplay.png</value>
    </variable>

    <variable name="Image_MuteBug">
        <value condition="Player.Muted">special://skin/extras/icons/mute.png</value>
        <value>special://skin/extras/icons/settings.png</value>
    </variable>

    <variable name="Image_ClearArt">
        <value condition="!String.IsEmpty(ListItem.Art(clearart))">$INFO[ListItem.Art(clearart)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.clearart))">$INFO[ListItem.Art(tvshow.clearart)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(artist.clearart))">$INFO[ListItem.Art(artist.clearart)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.clearart))">$INFO[Window(Home).Property(TMDbHelper.ListItem.clearart)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.tvshow.clearart))">$INFO[Window(Home).Property(TMDbHelper.ListItem.tvshow.clearart)]</value>
    </variable>

    <variable name="Image_AddonInfo_Enable">
        <value condition="String.IsEqual(Control.GetLabel(7),$LOCALIZE[24021])">special://skin/extras/icons/enabled.png</value>
        <value>special://skin/extras/icons/disabled.png</value>
    </variable>

    <variable name="Image_AddonInfo_Install">
        <value condition="String.IsEqual(Control.GetLabel(6),$LOCALIZE[24037])">special://skin/extras/icons/uninstall.png</value>
        <value>special://skin/extras/icons/download.png</value>
    </variable>

    <variable name="Image_Watched">
        <value condition="System.Setting(hidewatched)">special://skin/extras/icons/watched-hide.png</value>
        <value>special://skin/extras/icons/watched-show.png</value>
    </variable>
    <variable name="Image_Filtered">
        <value condition="Container.Filtered | !String.IsEmpty(Control.GetLabel(19).index(1))">special://skin/extras/icons/filter-on.png</value>
        <value>special://skin/extras/icons/filter-off.png</value>
    </variable>

    <variable name="Image_FanartOnly">
        <value condition="!String.IsEmpty(Container.ListItem.Art(fanart))">$INFO[Container.ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container.ListItem.Art(tvshow.fanart))">$INFO[Container.ListItem.Art(tvshow.fanart)]</value>
        <value condition="!String.IsEmpty(Container.ListItem.Art(artist.fanart))">$INFO[Container.ListItem.Art(artist.fanart)]</value>
    </variable>

    <variable name="Image_PosterOnly">
        <value condition="!String.IsEmpty(Container.ListItem.Art(poster))">$INFO[Container.ListItem.Art(poster)]</value>
        <value condition="!String.IsEmpty(Container.ListItem.Art(tvshow.poster))">$INFO[Container.ListItem.Art(tvshow.poster)]</value>
    </variable>

    <variable name="Image_ContextFanart">
        <value condition="!String.IsEmpty(Window(Home).Property(ContextMenu.Fanart))">$INFO[Window(Home).Property(ContextMenu.Fanart)]</value>
    </variable>

    <variable name="Image_ContextPoster">
        <value condition="!String.IsEmpty(Window(Home).Property(ContextMenu.Poster))">$INFO[Window(Home).Property(ContextMenu.Poster)]</value>
        <value condition="$EXP[Exp_ContextMenu_HasPoster]">$INFO[Window(Home).Property(TMDbHelper.ListItem.Poster)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ContextMenu.Icon))">$INFO[Window(Home).Property(ContextMenu.Icon)]</value>
        <value>common/kodi-logo.png</value>
    </variable>

    <variable name="Image_RipSource">
        <value condition="String.Contains(ListItem.FileNameAndPath,2160p) | String.Contains(ListItem.FileNameAndPath,UHD) | String.Contains(ListItem.FileNameAndPath,UltraHD) | String.Contains(ListItem.FileNameAndPath,Ultra-HD) | String.Contains(ListItem.FileNameAndPath,4K)">flags/$VAR[Texture_ColorMode_Dir]/other/4K.png</value>
        <value condition="String.Contains(ListItem.FileNameAndPath,blu-ray) | String.Contains(ListItem.FileNameAndPath,bluray) | String.Contains(ListItem.FileNameAndPath,bdrip) | String.Contains(ListItem.FileNameAndPath,bd25) | String.Contains(ListItem.FileNameAndPath,bd50)">flags/$VAR[Texture_ColorMode_Dir]/other/bluray.png</value>
        <value condition="String.Contains(ListItem.FileNameAndPath,hddvd) | String.Contains(ListItem.FileNameAndPath,hd-dvd)">flags/$VAR[Texture_ColorMode_Dir]/other/hddvd.png</value>
        <value condition="String.Contains(ListItem.FileNameAndPath,dvd)">flags/$VAR[Texture_ColorMode_Dir]/other/dvd.png</value>
        <value condition="String.Contains(ListItem.FileNameAndPath,hdtv) | String.Contains(ListItem.FileNameAndPath,pdtv) | String.Contains(ListItem.FileNameAndPath,dsr)">flags/$VAR[Texture_ColorMode_Dir]/other/hdtv.png</value>
        <value condition="String.Contains(ListItem.FileNameAndPath,sdtv)">flags/$VAR[Texture_ColorMode_Dir]/other/sdtv.png</value>
        <value condition="String.Contains(ListItem.FileNameAndPath,web-dl) | String.Contains(ListItem.FileNameAndPath,webdl) | String.Contains(ListItem.FileNameAndPath,WEBRip) | String.EndsWith(ListItem.FileNameAndPath,.strm) | [String.IsEmpty(ListItem.VideoCodec) + String.IsEmpty(ListItem.AudioCodec)]">flags/$VAR[Texture_ColorMode_Dir]/other/web-dl.png</value>
        <value>common/null.png</value>
    </variable>
    <variable name="Image_OSD_RipSource">
        <value condition="String.Contains(Player.FileNameAndPath,2160p) | String.Contains(Player.FileNameAndPath,UHD) | String.Contains(Player.FileNameAndPath,UltraHD) | String.Contains(Player.FileNameAndPath,Ultra-HD) | String.Contains(Player.FileNameAndPath,4K)">flags/$VAR[Texture_ColorMode_Dir]/other/4K.png</value>
        <value condition="String.Contains(Player.FileNameAndPath,blu-ray) | String.Contains(Player.FileNameAndPath,bluray) | String.Contains(Player.FileNameAndPath,bdrip) | String.Contains(Player.FileNameAndPath,bd25) | String.Contains(Player.FileNameAndPath,bd50)">flags/$VAR[Texture_ColorMode_Dir]/other/bluray.png</value>
        <value condition="String.Contains(Player.FileNameAndPath,hddvd) | String.Contains(Player.FileNameAndPath,hd-dvd)">flags/$VAR[Texture_ColorMode_Dir]/other/hddvd.png</value>
        <value condition="String.Contains(Player.FileNameAndPath,dvd)">flags/$VAR[Texture_ColorMode_Dir]/other/dvd.png</value>
        <value condition="String.Contains(Player.FileNameAndPath,hdtv) | String.Contains(Player.FileNameAndPath,pdtv) | String.Contains(Player.FileNameAndPath,dsr)">flags/$VAR[Texture_ColorMode_Dir]/other/hdtv.png</value>
        <value condition="String.Contains(Player.FileNameAndPath,sdtv)">flags/$VAR[Texture_ColorMode_Dir]/other/sdtv.png</value>
        <value condition="String.Contains(Player.FileNameAndPath,web-dl) | String.Contains(Player.FileNameAndPath,webdl) | String.Contains(Player.FileNameAndPath,WEBRip) | String.EndsWith(Player.FileNameAndPath,.strm) | [String.IsEmpty(VideoPlayer.VideoCodec) + String.IsEmpty(VideoPlayer.AudioCodec)]">flags/$VAR[Texture_ColorMode_Dir]/other/web-dl.png</value>
        <value>common/null.png</value>
    </variable>

    <variable name="Image_AudioCodec">
        <value condition="String.Contains(ListItem.FileNameAndPath,atmos)">flags/$VAR[Texture_ColorMode_Dir]/audio/atmos.png</value>
        <value condition="String.Contains(ListItem.FileNameAndPath,dtsx) | String.Contains(ListItem.FileNameAndPath,dts-x) | String.Contains(ListItem.FileNameAndPath,dts:x)">flags/$VAR[Texture_ColorMode_Dir]/audio/dtsx.png</value>
        <value>flags/$VAR[Texture_ColorMode_Dir]/audio/$INFO[ListItem.AudioCodec].png</value>
    </variable>
    <variable name="Image_OSD_AudioCodec">
        <value condition="String.Contains(Player.FileNameAndPath,atmos)">flags/$VAR[Texture_ColorMode_Dir]/audio/atmos.png</value>
        <value condition="String.Contains(Player.FileNameAndPath,dtsx) | String.Contains(Player.FileNameAndPath,dts-x) | String.Contains(Player.FileNameAndPath,dts:x)">flags/$VAR[Texture_ColorMode_Dir]/audio/dtsx.png</value>
        <value>flags/$VAR[Texture_ColorMode_Dir]/audio/$INFO[VideoPlayer.AudioCodec].png</value>
    </variable>

    <variable name="Image_ListItem_RottenTomatoes">
        <value condition="String.IsEqual(Window(home).Property(TMDbHelper.ListItem.RottenTomatoes_Image),certified)">certified.png</value>
        <value condition="String.IsEqual(Window(home).Property(TMDbHelper.ListItem.RottenTomatoes_Image),fresh)">rtfresh.png</value>
        <value condition="String.IsEqual(Window(home).Property(TMDbHelper.ListItem.RottenTomatoes_Image),rotten)">rtrotten.png</value>
        <value condition="String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating))">rtfresh.png</value>
        <value condition="Integer.IsGreater(Window(home).Property(TMDbHelper.ListItem.RottenTomatoes_Rating),59)">rtfresh.png</value>
        <value>rtfresh.png</value>
    </variable>
    <variable name="Image_Player_RottenTomatoes">
        <value condition="String.IsEqual(Window(home).Property(TMDbHelper.Player.RottenTomatoes_Image),certified)">certified.png</value>
        <value condition="String.IsEqual(Window(home).Property(TMDbHelper.Player.RottenTomatoes_Image),fresh)">rtfresh.png</value>
        <value condition="String.IsEqual(Window(home).Property(TMDbHelper.Player.RottenTomatoes_Image),rotten)">rtrotten.png</value>
        <value condition="String.IsEmpty(Window(home).Property(TMDbHelper.Player.RottenTomatoes_Rating))">rtfresh.png</value>
        <value condition="Integer.IsGreater(Window(home).Property(TMDbHelper.Player.RottenTomatoes_Rating),59)">rtfresh.png</value>
        <value>rtrotten.png</value>
    </variable>

    <variable name="Image_ListItem_RottenTomatoes_UserMeter">
        <value condition="Integer.IsGreater(Window(home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter),59) | String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.RottenTomatoes_UserMeter))">popcorn.png</value>
        <value>popcorn_spilt.png</value>
    </variable>
    <variable name="Image_Player_RottenTomatoes_UserMeter">
        <value condition="Integer.IsGreater(Window(home).Property(TMDbHelper.Player.RottenTomatoes_UserMeter),59) | String.IsEmpty(Window(home).Property(TMDbHelper.Player.RottenTomatoes_UserMeter))">popcorn.png</value>
        <value>popcorn_spilt.png</value>
    </variable>

    <variable name="Image_Overlay_List">
        <value condition="$EXP[Exp_HasWatchedProgress]" />

        <value condition="String.IsEqual(ListItem.Overlay,OverlayWatched.png) + !Skin.HasSetting(DisableIndicator.Watched)">indicator/checkmark-fo.png</value>
        <value condition="Integer.IsGreater(ListItem.PlayCount,0) + !String.IsEqual(ListItem.DBType,song) + !String.IsEqual(ListItem.DBType,album) + !String.IsEqual(ListItem.DBType,artist) + !String.IsEqual(ListItem.DBType,image) + !String.IsEqual(ListItem.DBType,addon) + !Skin.HasSetting(DisableIndicator.Watched)">indicator/checkmark-fo.png</value>

        <value condition="String.IsEqual(ListItem.Overlay,OverlayUnwatched.png) + String.IsEqual(ListItem.DBType,movie) + [String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.1.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.2.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.3.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.4.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.5.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.6.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.7.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.8.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.9.Title)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestMovie.10.Title))] + !Skin.HasSetting(DisableIndicator.New)">indicator/new-fo.png</value>

        <value condition="String.IsEqual(ListItem.Overlay,OverlayUnwatched.png) + String.IsEqual(ListItem.DBType,episode) + [String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.1.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.2.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.3.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.4.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.5.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.6.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.7.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.8.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.9.EpisodeTitle)) | String.IsEqual(ListItem.Title,Window(Home).Property(LatestEpisode.10.EpisodeTitle))] + !Skin.HasSetting(DisableIndicator.New)">indicator/new-fo.png</value>

        <value condition="!String.IsEmpty(ListItem.Property(Item.Info)) + !String.IsEmpty(ListItem.DBID) + !Skin.HasSetting(DisableIndicator.Library)">indicator/library.png</value>
        <value condition="ListItem.IsCollection + !Skin.HasSetting(DisableIndicator.MovieSet)">indicator/movieset.png</value>

        <value condition="Window.IsVisible(AddonBrowser.xml) + !String.IsEmpty(ListItem.AddonBroken)">indicator/broken.png</value>
        <value condition="Window.IsVisible(AddonBrowser.xml) + ListItem.Property(addon.orphaned)">indicator/orphaned.png</value>

        <value condition="Window.IsVisible(AddonBrowser.xml) + ListItem.Property(addon.downloading)">indicator/download.png</value>
        <value condition="Window.IsVisible(AddonBrowser.xml) + String.EndsWith(ListItem.Label2, 67%) | String.EndsWith(ListItem.Label2, 68%) | String.EndsWith(ListItem.Label2, 69%) | String.EndsWith(ListItem.Label2, 70%) | String.EndsWith(ListItem.Label2, 71%) | String.EndsWith(ListItem.Label2, 72%) | String.EndsWith(ListItem.Label2, 73%) | String.EndsWith(ListItem.Label2, 74%) | String.EndsWith(ListItem.Label2, 75%) | String.EndsWith(ListItem.Label2, 76%) | String.EndsWith(ListItem.Label2, 77%) | String.EndsWith(ListItem.Label2, 78%) | String.EndsWith(ListItem.Label2, 79%) | String.EndsWith(ListItem.Label2, 80%) | String.EndsWith(ListItem.Label2, 81%) | String.EndsWith(ListItem.Label2, 82%) | String.EndsWith(ListItem.Label2, 83%) | String.EndsWith(ListItem.Label2, 84%) | String.EndsWith(ListItem.Label2, 85%) | String.EndsWith(ListItem.Label2, 86%) | String.EndsWith(ListItem.Label2, 87%) | String.EndsWith(ListItem.Label2, 88%) | String.EndsWith(ListItem.Label2, 89%) | String.EndsWith(ListItem.Label2, 90%) | String.EndsWith(ListItem.Label2, 91%) | String.EndsWith(ListItem.Label2, 92%) | String.EndsWith(ListItem.Label2, 93%) | String.EndsWith(ListItem.Label2, 94%) | String.EndsWith(ListItem.Label2, 95%) | String.EndsWith(ListItem.Label2, 96%) | String.EndsWith(ListItem.Label2, 97%) | String.EndsWith(ListItem.Label2, 98%) | String.EndsWith(ListItem.Label2, 99%) | String.EndsWith(ListItem.Label2, 100%)">indicator/inprogress-75.png</value>
        <value condition="Window.IsVisible(AddonBrowser.xml) + String.EndsWith(ListItem.Label2, 34%) | String.EndsWith(ListItem.Label2, 35%) | String.EndsWith(ListItem.Label2, 36%) | String.EndsWith(ListItem.Label2, 37%) | String.EndsWith(ListItem.Label2, 38%) | String.EndsWith(ListItem.Label2, 39%) | String.EndsWith(ListItem.Label2, 40%) | String.EndsWith(ListItem.Label2, 41%) | String.EndsWith(ListItem.Label2, 42%) | String.EndsWith(ListItem.Label2, 43%) | String.EndsWith(ListItem.Label2, 44%) | String.EndsWith(ListItem.Label2, 45%) | String.EndsWith(ListItem.Label2, 46%) | String.EndsWith(ListItem.Label2, 47%) | String.EndsWith(ListItem.Label2, 48%) | String.EndsWith(ListItem.Label2, 49%) | String.EndsWith(ListItem.Label2, 50%) | String.EndsWith(ListItem.Label2, 51%) | String.EndsWith(ListItem.Label2, 52%) | String.EndsWith(ListItem.Label2, 53%) | String.EndsWith(ListItem.Label2, 54%) | String.EndsWith(ListItem.Label2, 55%) | String.EndsWith(ListItem.Label2, 56%) | String.EndsWith(ListItem.Label2, 57%) | String.EndsWith(ListItem.Label2, 58%) | String.EndsWith(ListItem.Label2, 59%) | String.EndsWith(ListItem.Label2, 60%) | String.EndsWith(ListItem.Label2, 61%) | String.EndsWith(ListItem.Label2, 62%) | String.EndsWith(ListItem.Label2, 63%) | String.EndsWith(ListItem.Label2, 64%) | String.EndsWith(ListItem.Label2, 65%) | String.EndsWith(ListItem.Label2, 66%)">indicator/inprogress-50.png</value>
        <value condition="Window.IsVisible(AddonBrowser.xml) + String.EndsWith(ListItem.Label2, 0%) | String.EndsWith(ListItem.Label2, 1%) | String.EndsWith(ListItem.Label2, 2%) | String.EndsWith(ListItem.Label2, 3%) | String.EndsWith(ListItem.Label2, 4%) | String.EndsWith(ListItem.Label2, 5%) | String.EndsWith(ListItem.Label2, 6%) | String.EndsWith(ListItem.Label2, 7%) | String.EndsWith(ListItem.Label2, 8%) | String.EndsWith(ListItem.Label2, 9%) | String.EndsWith(ListItem.Label2, 10%) | String.EndsWith(ListItem.Label2, 11%) | String.EndsWith(ListItem.Label2, 12%) | String.EndsWith(ListItem.Label2, 13%) | String.EndsWith(ListItem.Label2, 14%) | String.EndsWith(ListItem.Label2, 15%) | String.EndsWith(ListItem.Label2, 16%) | String.EndsWith(ListItem.Label2, 17%) | String.EndsWith(ListItem.Label2, 18%) | String.EndsWith(ListItem.Label2, 19%) | String.EndsWith(ListItem.Label2, 20%) | String.EndsWith(ListItem.Label2, 21%) | String.EndsWith(ListItem.Label2, 22%) | String.EndsWith(ListItem.Label2, 23%) | String.EndsWith(ListItem.Label2, 24%) | String.EndsWith(ListItem.Label2, 25%) | String.EndsWith(ListItem.Label2, 26%) | String.EndsWith(ListItem.Label2, 27%) | String.EndsWith(ListItem.Label2, 28%) | String.EndsWith(ListItem.Label2, 29%) | String.EndsWith(ListItem.Label2, 30%) | String.EndsWith(ListItem.Label2, 31%) | String.EndsWith(ListItem.Label2, 32%) | String.EndsWith(ListItem.Label2, 33%)">indicator/inprogress-25.png</value>

        <value condition="Window.IsVisible(AddonBrowser.xml) + ListItem.Property(addon.isinstalled) + !ListItem.Property(addon.isenabled)">indicator/disabled.png</value>
        <value condition="Window.IsVisible(AddonBrowser.xml) + ListItem.Property(addon.hasupdate)">indicator/update.png</value>
        <value condition="Window.IsVisible(AddonBrowser.xml) + ListItem.Property(addon.isinstalled)">indicator/library.png</value>
        <value>indicator/library.png</value>
    </variable>
</includes>
